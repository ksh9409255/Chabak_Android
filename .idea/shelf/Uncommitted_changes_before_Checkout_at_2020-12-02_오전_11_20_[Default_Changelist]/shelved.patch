Index: app/src/main/java/com/syh4834/chabak/review/ReviewUploadActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.syh4834.chabak.review;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.ClipData;\r\nimport android.content.SharedPreferences;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.Uri;\r\nimport android.provider.MediaStore;\r\nimport android.content.Intent;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.RadioButton;\r\nimport android.widget.RadioGroup;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.syh4834.chabak.R;\r\nimport com.syh4834.chabak.review.recycler.RecyclerReviewUploadImgAdapter;\r\nimport com.syh4834.chabak.review.recycler.RecyclerReviewUploadImgData;\r\nimport com.syh4834.chabak.api.ChabakService;\r\nimport com.syh4834.chabak.api.response.ResponseUploadReview;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\n\r\nimport okhttp3.MediaType;\r\nimport okhttp3.MultipartBody;\r\nimport okhttp3.RequestBody;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\nimport retrofit2.Retrofit;\r\nimport retrofit2.converter.gson.GsonConverterFactory;\r\n\r\n\r\npublic class ReviewUploadActivity extends AppCompatActivity {\r\n    private int GALLERY_REQUEST_CODE = 10010;\r\n\r\n    private ImageView imgPlace;\r\n\r\n    private TextView tvPlaceTitle;\r\n    private TextView tvPlaceName;\r\n\r\n    private RadioGroup rgReview;\r\n\r\n    private EditText edtReviewComment;\r\n\r\n    private Button btnReviewUpload;\r\n    private Button btnBack;\r\n\r\n    private RecyclerView rvReviewUploadImg;\r\n    private RecyclerReviewUploadImgData recyclerReviewUploadImgData;\r\n    private RecyclerReviewUploadImgAdapter recyclerReviewUploadImgAdapter;\r\n\r\n    private String token;\r\n    private int placeIdx;\r\n    private int reviewStarId;\r\n    private int reviewStar;\r\n\r\n    private Bitmap img;\r\n\r\n    Retrofit retrofit = new Retrofit.Builder()\r\n            .baseUrl(ChabakService.BASE_RUL)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build();\r\n    ChabakService chabakService = retrofit.create(ChabakService.class);\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_review_upload);\r\n\r\n        imgPlace = findViewById(R.id.img_place);\r\n        imgPlace.setClipToOutline(true);\r\n\r\n        tvPlaceTitle = findViewById(R.id.tv_place_title);\r\n        tvPlaceName = findViewById(R.id.tv_place_name);\r\n\r\n        rgReview = findViewById(R.id.rg_review);\r\n\r\n        edtReviewComment = findViewById(R.id.edt_review_comment);\r\n\r\n        btnReviewUpload = findViewById(R.id.btn_review_upload);\r\n        btnBack = findViewById(R.id.btn_back);\r\n\r\n        recyclerReviewUploadImgAdapter = new RecyclerReviewUploadImgAdapter();\r\n\r\n        placeIdx = getIntent().getIntExtra(\"placeIdx\", 0);\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"chabak\", MODE_PRIVATE);\r\n        token = sharedPreferences.getString(\"token\", null);\r\n\r\n        tvPlaceTitle.setText(getIntent().getStringExtra(\"placeTitle\"));\r\n        tvPlaceName.setText(getIntent().getStringExtra(\"placeName\"));\r\n        Glide.with(this).load(getIntent().getStringExtra(\"placeImg\")).into(imgPlace);\r\n\r\n        btnBack.setOnClickListener(l -> {\r\n            Intent intent = new Intent();\r\n            setResult(RESULT_CANCELED, intent);\r\n            finish();\r\n        });\r\n\r\n        recyclerInit();\r\n\r\n        recyclerReviewUploadImgAdapter.setOnItemClickListener(new RecyclerReviewUploadImgAdapter.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(View v, int position) {\r\n                if (position == 0) {\r\n                    Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Audio.Media.EXTERNAL_CONTENT_URI);\r\n                    intent.setType(\"image/*\");\r\n                    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);\r\n                    startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), GALLERY_REQUEST_CODE);\r\n                }\r\n            }\r\n        });\r\n\r\n        btnReviewUpload.setOnClickListener(l -> {\r\n            reviewStarId = rgReview.getCheckedRadioButtonId();\r\n            reviewStar = 0;\r\n\r\n            RadioButton getReviewStar = (RadioButton) findViewById(reviewStarId);\r\n\r\n            Log.e(\"radio\", String.valueOf(rgReview.getCheckedRadioButtonId()));\r\n            Log.e(\"getReviewStar\", \"null\"+getReviewStar.getTag());\r\n\r\n            CharSequence text = getReviewStar.getTag().toString();\r\n            if (\"별로에요\".equals(text)) {\r\n                reviewStar = 1;\r\n            } else if (\"조금 아쉬워요\".equals(text)) {\r\n                reviewStar = 2;\r\n            } else if (\"괜찮아요\".equals(text)) {\r\n                reviewStar = 3;\r\n            } else if (\"좋았어요\".equals(text)) {\r\n                reviewStar = 4;\r\n            } else if (\"최고에요\".equals(text)) {\r\n                reviewStar = 5;\r\n            }\r\n\r\n            if(reviewStar == 0) {\r\n                Toast.makeText(this, \"차박여행지에 대한 점수를 표시해주세요\", Toast.LENGTH_SHORT).show();\r\n            } else if(edtReviewComment.getText().length() == 0) {\r\n                Toast.makeText(this, \"리뷰를 적어주세요\", Toast.LENGTH_SHORT).show();\r\n            } else {\r\n                MultipartBody.Part[] imgs = new MultipartBody.Part[recyclerReviewUploadImgAdapter.getItemCount()];\r\n                ArrayList<RecyclerReviewUploadImgData> recyclerReviewUploadImgArray = recyclerReviewUploadImgAdapter.getItem();\r\n\r\n                for (int i = 1; i < recyclerReviewUploadImgAdapter.getItemCount(); i++) {\r\n                    File uploadFile = new File(recyclerReviewUploadImgArray.get(i).getUploadImg());\r\n                    InputStream in = null;\r\n                    try {\r\n                        in = getContentResolver().openInputStream(Uri.fromFile(uploadFile));\r\n                    } catch (FileNotFoundException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    img = BitmapFactory.decodeStream(in);\r\n                    try {\r\n                        in.close();\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n                    img.compress(Bitmap.CompressFormat.JPEG, 20, baos);\r\n\r\n                    RequestBody imgBody = RequestBody.create(MediaType.parse(\"image/*\"),  baos.toByteArray());\r\n\r\n                    imgs[i] = MultipartBody.Part.createFormData(\"imgs\", uploadFile.getName(), imgBody);\r\n                }\r\n\r\n                chabakService.uploadReview(token,\r\n                        RequestBody.create(MediaType.parse(\"text.plain\"), String.valueOf(placeIdx)),\r\n                        RequestBody.create(MediaType.parse(\"text.plain\"), edtReviewComment.getText().toString()),\r\n                        RequestBody.create(MediaType.parse(\"text.plain\"), String.valueOf(reviewStar)),\r\n                        imgs).enqueue(new Callback<ResponseUploadReview>() {\r\n                    @Override\r\n                    public void onResponse(Call<ResponseUploadReview> call, Response<ResponseUploadReview> response) {\r\n                        if(response.body().getSuccess()) {\r\n                            Intent intent = new Intent();\r\n                            intent.putExtra(\"reviewStar\", reviewStar);\r\n                            setResult(RESULT_OK, intent);\r\n                            finish();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ResponseUploadReview> call, Throwable t) {\r\n                        Log.e(\"upload\", \"fail\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private String getRealPathFromURI(Uri contentURI) {\r\n        String [] proj={MediaStore.Images.Media.DATA};\r\n        Cursor cursor = managedQuery( contentURI,\r\n                proj, // Which columns to return\r\n                null,       // WHERE clause; which rows to return (all rows)\r\n                null,       // WHERE clause selection arguments (none)\r\n                null); // Order-by clause (ascending by name)\r\n        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);\r\n        cursor.moveToFirst();\r\n        return cursor.getString(column_index);\r\n    }\r\n\r\n    private void recyclerInit() {\r\n        rvReviewUploadImg = findViewById(R.id.rv_review_upload_img);\r\n\r\n        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(rvReviewUploadImg.getContext(),\r\n                LinearLayoutManager.HORIZONTAL, false) {\r\n            @Override\r\n            public boolean canScrollVertically() {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        rvReviewUploadImg.setLayoutManager(linearLayoutManager);\r\n        recyclerReviewUploadImgAdapter = new RecyclerReviewUploadImgAdapter();\r\n        rvReviewUploadImg.setAdapter(recyclerReviewUploadImgAdapter);\r\n\r\n        String uri = String.format(\"android.resource://\" + R.class.getPackage().getName() + \"/\" + R.drawable.camera);\r\n        recyclerReviewUploadImgData = new RecyclerReviewUploadImgData();\r\n        recyclerReviewUploadImgData.setUploadImg(uri);\r\n        recyclerReviewUploadImgAdapter.addItem(recyclerReviewUploadImgData);\r\n        recyclerReviewUploadImgAdapter.notifyItemChanged(0);\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        if (resultCode == RESULT_OK && requestCode == GALLERY_REQUEST_CODE) {\r\n            ClipData clipData = data.getClipData();\r\n\r\n            if (clipData != null) {\r\n                for (int i = 0; i < clipData.getItemCount(); i++) {\r\n                    String urione = getRealPathFromURI(clipData.getItemAt(i).getUri());\r\n\r\n                    recyclerReviewUploadImgData = new RecyclerReviewUploadImgData();\r\n                    recyclerReviewUploadImgData.setUploadImg(urione);\r\n                    recyclerReviewUploadImgAdapter.addItem(recyclerReviewUploadImgData);\r\n                }\r\n            }\r\n            recyclerReviewUploadImgAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        btnBack.performClick();\r\n    }\r\n}\r\n\r\n\r\n\r\n//backPressed 필요하면 추가하기
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/syh4834/chabak/review/ReviewUploadActivity.java	(revision bc8bbacc20908a4344e1c0f1a3193661c4cc770f)
+++ app/src/main/java/com/syh4834/chabak/review/ReviewUploadActivity.java	(date 1606875595630)
@@ -249,6 +249,7 @@
 
         if (resultCode == RESULT_OK && requestCode == GALLERY_REQUEST_CODE) {
             ClipData clipData = data.getClipData();
+            Log.e("ClipData", String.valueOf(clipData));
 
             if (clipData != null) {
                 for (int i = 0; i < clipData.getItemCount(); i++) {
